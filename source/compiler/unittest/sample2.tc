
type Operation = enum {
    ADD, SUB, MUL, DIV, ABS, LOG, EXP, NEG
}

type Tree = variant {
    Leaf(value: u32),
    Binary(lhs: Tree, op: Operation, rhs: Tree),
    Unary(op: Operation, unary: Tree)
}

type Iterable = interface {
    fn get() -> Tree
}

let {t: Tree, matata: Operation} = 1, [t2: Tree, tt23: Tree?] = 2 in 3 + 2

