
type arr = ((u32[0xff]) | (u32 | f8.cool[255]))[][]

type Operation = enum {
    ADD, SUB, MUL, DIV, ABS, LOG, EXP, NEG
}[22] | u32

type OperationNullable = (enum {
    ADD, SUB, MUL, DIV, ABS, LOG, EXP, NEG
}[22] | u32?)?

type UserInfo<T>  = T<u32>[0xff]

type User = struct {
    name: string
    age: u32
    data: (std.ArrayBuffer | std.BinaryBuffer<String>[512])
}

type Serializable = interface {
    fn serialize() -> u8[]
    fn append(data: u8[])
    fn duplicate(data: Serializable<Serializable<u32>[][]>) -> Serializable<u32>
}


type Serializable2<T: Iterable, U> = interface(Sortable<T, String>) {
    fn Serialize() -> T[]
    fn Deserialize(data: T[])
}

type Tree = variant {
    Leaf(val: u32),
    Binary(left: Tree, right: Tree),
    Unary(child: Tree)
}

type Callable<T> = fn(x: T, y: T) -> struct {x: T, y: T[]}



type Pointer = ptr<struct {x: u32, y: u32}>
type Pointer2<T> = ptr<struct {x: T, y: T}?>
